import sys
sys.path.append("..")
from gmsc_mapper.predict import predict_genes,filter_smorfs
from gmsc_mapper.fasta import fasta_iter
import pytest

known_predicted = {"k141_39_1 # 944 # 4180 # 1 # ID=1_1;partial=00;start_type=ATG;rbs_motif=AATAA;rbs_spacer=8bp;gc_cont=0.386":"MGNSKKMLGDEKEGTSAIPGFNQIQFEGFYRFIDQGLIEELAKFPKIEDIDHEIEFQLFVETYQLVEPLIKERDAVYESLTYSSELYVSAGLIWKTSRNMQEQRIFIGNIPLMNSLGTSIVNGIYRIVINQILQSPGIYYQSELDHNGISVYTGTIISDWGGRLELEIDKKARIWARVSRKQKISILVLSSAMGLNLREILENVCYPEIFLSFLTDKEKKKIGSKENAILEFYQQFSCVGGDPIFSESLCKELQKKFFHQRCELGRIGRRNINWRLNLNIPQNNIFLLPRDVLAAADHLIGMKFGMGTLDDMNHLKNKRIRSVADLLQDQLGLALARLENVVKGTISGAIRHKLIPTPQNLVTSTPLTTTYESFFGLHPLSQVLDRTNPLTQIVHGRKLSYLGPGGLTGRTANFRIRDIHPSHYGRICPIDTSEGINVGLIGSLSIHARIGDWGSLESPFYELFEKSKKARIRMLFLSPSQDEYYMIAAGNSLALNRGIQEEQAVPARYRQEFLTIAWEEVHLRSIFPFQYFSIGASLIPFIEHNDANRALMSSNMQRQAVPLSRSEKCIVGTGLERQVALDSGVPAIAEHEGKILYTDTEKIVFSGNGDTLSIPLIMYQRSNKNTCMHQKPQVRRGKCIKKGQILADGAATVGGELALGKNILVAYMPWEGYNFEDAVLISECLVYGDIYTSFHIRKYEIQTHVTTQGPERITKEIPHLEGRLLRNLDKNGIVMLGSWVETGDILVGKLTPQVAKESSYAPEDRLLRAILGIQVSTSKETCLKLPIGGRGRVIDVRWVQKKGGSSYNPEIIRVYISQKREIKVGDKVAGRHGNKGIISKILPRQDMPYLQDGRPVDMVFNPLGVPSRMNVGQIFECSLGLAGSLLDRHYRIAPFDERYEQEASRKLVFSELYEASKQTANPWVFEPEYPGKSRIFDGRTGDPFEQPVIIGKPYILKLIHQVDDKIHGRSSGHYALVTQQPLRGRSKQGGQRVGEMEVWALEGFGVAHILQEMLTYKSDHIRARQEVLGTTIIGGTIPKPEDAPESFRLLVRELRSLALELNHFLVSEKNFQINRKEV*",
                   "k141_39_2 # 4186 # 4644 # 1 # ID=1_2;partial=00;start_type=ATG;rbs_motif=TAA;rbs_spacer=5bp;gc_cont=0.353":"MNHKISYMIDRYKHQQLRIGLVSPQQISAWATKIIPNGEIVGEVTKPYTFHYKTNKPEKDGLFCERIFGPIKSGICACGNYRVIGDEKEDPKFCEQCGVEFVDSRIRRYQMGYIKLTCPVTHVWYLKRLPSYIANLLDKPLKELEGLVYCDV*",
                   "k141_87_1 # 455 # 679 # -1 # ID=2_1;partial=00;start_type=ATG;rbs_motif=None;rbs_spacer=None;gc_cont=0.404":"MIYLSIEKDTKDLYLFINSPGGWVISGMAIYDTMQFVRPDVQTICMGLAASIASFILVGGAITKRIAFPHAWRQ*",
                   "k141_87_2 # 1625 # 1939 # -1 # ID=2_2;partial=00;start_type=TTG;rbs_motif=None;rbs_spacer=None;gc_cont=0.279":"MLLIIQKPVRKKFPLVLFILSYFTFILYFILAYSTYVLNIINLNMINKVGKKDNSIKKRNPNFTFPHQSEIENFILFFFHFMPIGVPKVPFRSPGEGDTSWVDI*",
                   "k141_87_3 # 2185 # 3711 # 1 # ID=2_3;partial=00;start_type=ATG;rbs_motif=GGA/GAG/AGG;rbs_spacer=5-10bp;gc_cont=0.432":"MGLPWYRVHTVVLNDPGRLLAVHIMHTALVAGWAGSMALYELAVFDPSDPVLDPMWRQGMFVIPFMTRLGITNSWGGWNITGGTITNPGLWSYEGVAGAHIVFSGLCFLAAIWHWVYWDLEIFCDERTGKPSLDLPKIFGIHLFLSGVACFGFGAFHVTGLYGPGIWVSDPYGLTGKVQPVNPAWGVEGFDPFVPGGIASHHIAAGTLGILAGLFHLSVRPPQRLYKGLRMGNIETVLSSSIAAVFFAAFVVAGTMWYGSATTPIELFGPTRYQWDQGYFQQEIYRRVSAGLAENQSLSEAWAKIPEKLAFYDYIGNNPAKGGLFRAGSMDNGDGIAVGWLGHPVFRNKEGRELFVRRMPTFFETFPVVLVDGDGIVRADVPFRRAESKYSVEQVGVTVEFYGGELNGVSYSDPATVKKYARRAQLGEIFELDRATLKSDGVFRSSPRGWFTFGHASFALLFFFGHIWHGARTLFRDVFAGIDPDLDAQVEFGAFQKLGDPTTKRQAV*",
                   "k141_87_4 # 4299 # 4520 # 1 # ID=2_4;partial=00;start_type=ATG;rbs_motif=None;rbs_spacer=None;gc_cont=0.396":"MATQTVEDSSRSGPRSTTVGKLLKPLNSEYGKVAPGWGTTPLMGVAMALFAVFLSIILEIYNSSVLLDGISVN*",
                   "k141_87_5 # 5104 # 5358 # -1 # ID=2_5;partial=00;start_type=ATG;rbs_motif=None;rbs_spacer=None;gc_cont=0.294":"MEYKVLNLSLIQYYFLLFKDMKESKCESSSLWLNAKKSSKLIRLYVVLIVTGLLNLLDYLSLLSFFIWYLYGTGTGISSCFLYY*"}
known_filtered = {"smORF_0 # k141_87_1 # 455 # 679 # -1 # ID=2_1;partial=00;start_type=ATG;rbs_motif=None;rbs_spacer=None;gc_cont=0.404":"MIYLSIEKDTKDLYLFINSPGGWVISGMAIYDTMQFVRPDVQTICMGLAASIASFILVGGAITKRIAFPHAWRQ*",
                  "smORF_1 # k141_87_4 # 4299 # 4520 # 1 # ID=2_4;partial=00;start_type=ATG;rbs_motif=None;rbs_spacer=None;gc_cont=0.396":"MATQTVEDSSRSGPRSTTVGKLLKPLNSEYGKVAPGWGTTPLMGVAMALFAVFLSIILEIYNSSVLLDGISVN*",
                  "smORF_2 # k141_87_5 # 5104 # 5358 # -1 # ID=2_5;partial=00;start_type=ATG;rbs_motif=None;rbs_spacer=None;gc_cont=0.294":"MEYKVLNLSLIQYYFLLFKDMKESKCESSSLWLNAKKSSKLIRLYVVLIVTGLLNLLDYLSLLSFFIWYLYGTGTGISSCFLYY*"}

predict_dict = {}
filter_dict = {}
def test_predict_genes():
    predict_genes("./tests/test_contig.fa","./tests/predicted.faa")
    for h,seq in fasta_iter("./predicted.faa",full_header=True):
        predict_dict[h] = seq
    assert predict_dict == known_predicted

def test_filter():
    filter_smorfs("./tests/predicted.faa", "./tests/filtered.faa")
    for h,seq in fasta_iter("./tests/filtered.faa",full_header=True):
        filter_dict[h] = seq
    assert filter_dict == known_filtered

if __name__ == '__main__':
    pytest.main()